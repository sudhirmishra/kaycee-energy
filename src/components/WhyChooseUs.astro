---
import { Icon } from 'astro-icon/components'; // Import Icon component

const cardData = [
  {
    "title": "Innovative Solutions",
    "description": "Proudly tailoring cutting-edge solutions to your needs, benefiting from innovation's state-of-the-art edge.",
    "icon": "bi:lightbulb" // Updated icon from Bootstrap Icons (bi)
  },
  {
    "title": "Quality Assurance",
    "description": "Quality is our cornerstone. Stringent standards ensure top reliability and performance in every solution.",
    "icon": "bi:patch-check" // Updated icon
  },
  {
    "title": "Timely Delivery",
    "description": "We value energy sector deadlines. Our efficient project management ensures timely delivery, quality intact.",
    "icon": "bi:clock-history" // Updated icon
  },
  {
    "title": "Sustainability",
    "description": "Committed to eco-friendly EPC solutions, we minimize impact while maximizing efficiency responsibly.",
    "icon": "bi:recycle" // Updated icon
  },
  {
    "title": "Expertise",
    "description": "With years of honed expertise, our dedicated professionals ensure EHV power transmission success.",
    "icon": "bi:briefcase" // Updated icon
  }
];
const uniqueId = `carousel-${Math.random().toString(36).substring(2, 9)}`;
---

<section class="py-16 md:py-24 bg-slate-50 overflow-hidden">
  <!-- Titles: Centered, within standard page width -->
  <div class="container mx-auto px-4 text-center mb-12 md:mb-16">
    <p class="text-lg text-primary font-semibold mb-2 tracking-wide">Since 1996</p>
    <h2 class="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900">Why you Choose us</h2>
  </div>

  <!-- Carousel Wrapper: Relative for button positioning, padding for button spacing from edges -->
  <div class="relative px-4 sm:px-6 md:px-8">
    <!-- Viewport: Hides overflow -->
    <div id={`carousel-viewport-${uniqueId}`} class="overflow-hidden">
      <!-- Content: Flex container that moves, negative margin to align first card -->
      <div id={`carousel-content-${uniqueId}`} class="flex transition-transform duration-300 ease-in-out -ml-3">
        {cardData.map((card) => (
          // Card Item: flex-none for fixed width, mx-3 for spacing
          <div class="flex-none w-72 sm:w-80 mx-3">
            <div class="bg-white p-6 md:p-8 rounded-xl shadow-lg hover:shadow-xl transition-shadow duration-300 h-full flex flex-col transform hover:-translate-y-1">
              <div class="flex items-center mb-4">
                {/* Use Astro Icon component for Bootstrap Icons */}
                {card.icon && <Icon name={card.icon} class="w-7 h-7 mr-3 text-primary" />}
                <h3 class="text-xl md:text-2xl font-semibold text-gray-800">{card.title}</h3>
              </div>
              <p class="text-gray-600 text-base leading-relaxed flex-grow">{card.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>

    {/* Previous Button */} 
    <button 
      id={`prev-${uniqueId}`}
      aria-label="Previous slide"
      class="absolute left-0 sm:left-2 md:left-4 top-1/2 -translate-y-1/2 z-10 bg-white/70 hover:bg-white rounded-full p-2.5 shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-opacity"
      disabled
    >
      <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>
    </button>

    {/* Next Button */} 
    <button 
      id={`next-${uniqueId}`}
      aria-label="Next slide"
      class="absolute right-0 sm:right-2 md:right-4 top-1/2 -translate-y-1/2 z-10 bg-white/70 hover:bg-white rounded-full p-2.5 shadow-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-opacity"
      disabled
    >
      <svg class="w-5 h-5 sm:w-6 sm:h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>
    </button>
  </div>
</section>

<script define:vars={{ cardDataLength: cardData.length, uniqueId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const carouselViewport = document.getElementById(`carousel-viewport-${uniqueId}`);
    const carouselContent = document.getElementById(`carousel-content-${uniqueId}`);
    const prevButton = document.getElementById(`prev-${uniqueId}`);
    const nextButton = document.getElementById(`next-${uniqueId}`);

    if (!carouselContent || !prevButton || !nextButton || !carouselViewport) {
      // console.error('Carousel elements not found for ID:', uniqueId);
      return;
    }

    const items = carouselContent.children;
    if (items.length === 0) {
        prevButton.style.display = 'none';
        nextButton.style.display = 'none';
        return;
    }

    let currentIndex = 0;
    let itemWidth = 0;
    let visibleItems = 1;

    function calculateDimensions() {
      if (items.length > 0) {
        const firstItem = items[0];
        const style = window.getComputedStyle(firstItem);
        itemWidth = firstItem.offsetWidth + (parseFloat(style.marginLeft) || 0) + (parseFloat(style.marginRight) || 0);
      }
      if (carouselViewport.offsetWidth > 0 && itemWidth > 0) {
        visibleItems = Math.max(1, Math.floor(carouselViewport.offsetWidth / itemWidth));
      } else {
        visibleItems = 1; // Default if viewport or itemWidth is 0
      }
      updateCarousel();
      updateButtonStates();
    }

    function updateCarousel() {
      if (itemWidth > 0) { // Prevent transform if itemWidth is not calculated
        const offset = -currentIndex * itemWidth;
        carouselContent.style.transform = `translateX(${offset}px)`;
      }
    }

    function updateButtonStates() {
      if (items.length === 0 || cardDataLength <= visibleItems) { // Disable if no items or all items are visible
        prevButton.disabled = true;
        nextButton.disabled = true;
      } else {
        prevButton.disabled = false; // Always enabled if looping and items > visibleItems
        nextButton.disabled = false; // Always enabled if looping and items > visibleItems
      }

      prevButton.classList.toggle('opacity-50', prevButton.disabled);
      prevButton.classList.toggle('cursor-not-allowed', prevButton.disabled);
      nextButton.classList.toggle('opacity-50', nextButton.disabled);
      nextButton.classList.toggle('cursor-not-allowed', nextButton.disabled);
    }

    prevButton.addEventListener('click', () => {
      if (cardDataLength <= visibleItems) return; // Do nothing if all items are visible

      if (currentIndex > 0) {
        currentIndex--;
      } else {
        // Loop to the end
        currentIndex = Math.max(0, cardDataLength - visibleItems);
      }
      updateCarousel();
      // updateButtonStates(); // No longer needed here if buttons are always enabled (or handled by initial check)
    });

    nextButton.addEventListener('click', () => {
      if (cardDataLength <= visibleItems) return; // Do nothing if all items are visible
      
      if (currentIndex < (cardDataLength - visibleItems)) {
        currentIndex++;
      } else {
        // Loop to the beginning
        currentIndex = 0;
      }
      updateCarousel();
      // updateButtonStates(); // No longer needed here
    });
    
    // Initial calculation
    calculateDimensions();
    // Recalculate on resize
    window.addEventListener('resize', debounce(calculateDimensions, 200));

    // Debounce function
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
  });
</script>
